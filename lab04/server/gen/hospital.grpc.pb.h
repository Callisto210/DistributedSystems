// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hospital.proto
#ifndef GRPC_hospital_2eproto__INCLUDED
#define GRPC_hospital_2eproto__INCLUDED

#include "hospital.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class Hospital final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddExamination(::grpc::ClientContext* context, const ::ExaminationResult& request, ::AddExaminationReturnMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AddExaminationReturnMsg>> AsyncAddExamination(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AddExaminationReturnMsg>>(AsyncAddExaminationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ExaminationResult>> GetExamination(::grpc::ClientContext* context, const ::ExaminationResult& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ExaminationResult>>(GetExaminationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ExaminationResult>> AsyncGetExamination(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ExaminationResult>>(AsyncGetExaminationRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AddExaminationReturnMsg>* AsyncAddExaminationRaw(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ExaminationResult>* GetExaminationRaw(::grpc::ClientContext* context, const ::ExaminationResult& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ExaminationResult>* AsyncGetExaminationRaw(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddExamination(::grpc::ClientContext* context, const ::ExaminationResult& request, ::AddExaminationReturnMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AddExaminationReturnMsg>> AsyncAddExamination(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AddExaminationReturnMsg>>(AsyncAddExaminationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ExaminationResult>> GetExamination(::grpc::ClientContext* context, const ::ExaminationResult& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ExaminationResult>>(GetExaminationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ExaminationResult>> AsyncGetExamination(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ExaminationResult>>(AsyncGetExaminationRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::AddExaminationReturnMsg>* AsyncAddExaminationRaw(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ExaminationResult>* GetExaminationRaw(::grpc::ClientContext* context, const ::ExaminationResult& request) override;
    ::grpc::ClientAsyncReader< ::ExaminationResult>* AsyncGetExaminationRaw(::grpc::ClientContext* context, const ::ExaminationResult& request, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_AddExamination_;
    const ::grpc::RpcMethod rpcmethod_GetExamination_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::AddExaminationReturnMsg* response);
    virtual ::grpc::Status GetExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::grpc::ServerWriter< ::ExaminationResult>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddExamination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddExamination() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddExamination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::AddExaminationReturnMsg* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddExamination(::grpc::ServerContext* context, ::ExaminationResult* request, ::grpc::ServerAsyncResponseWriter< ::AddExaminationReturnMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExamination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetExamination() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetExamination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::grpc::ServerWriter< ::ExaminationResult>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExamination(::grpc::ServerContext* context, ::ExaminationResult* request, ::grpc::ServerAsyncWriter< ::ExaminationResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddExamination<WithAsyncMethod_GetExamination<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AddExamination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddExamination() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddExamination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::AddExaminationReturnMsg* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExamination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetExamination() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetExamination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::grpc::ServerWriter< ::ExaminationResult>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddExamination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddExamination() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::ExaminationResult, ::AddExaminationReturnMsg>(std::bind(&WithStreamedUnaryMethod_AddExamination<BaseClass>::StreamedAddExamination, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddExamination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::AddExaminationReturnMsg* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddExamination(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ExaminationResult,::AddExaminationReturnMsg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddExamination<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetExamination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetExamination() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::SplitServerStreamingHandler< ::ExaminationResult, ::ExaminationResult>(std::bind(&WithSplitStreamingMethod_GetExamination<BaseClass>::StreamedGetExamination, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetExamination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExamination(::grpc::ServerContext* context, const ::ExaminationResult* request, ::grpc::ServerWriter< ::ExaminationResult>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetExamination(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ExaminationResult,::ExaminationResult>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetExamination<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddExamination<WithSplitStreamingMethod_GetExamination<Service > > StreamedService;
};


#endif  // GRPC_hospital_2eproto__INCLUDED
