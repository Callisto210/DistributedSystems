// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hospital.proto

#ifndef PROTOBUF_hospital_2eproto__INCLUDED
#define PROTOBUF_hospital_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hospital_2eproto();
void protobuf_InitDefaults_hospital_2eproto();
void protobuf_AssignDesc_hospital_2eproto();
void protobuf_ShutdownFile_hospital_2eproto();

class AddExaminationReturnMsg;
class ExaminationResult;
class Parameter;
class Person;

// ===================================================================

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  static const Person* internal_default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  void UnsafeMergeFrom(const Person& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string FirstName = 2;
  void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& firstname() const;
  void set_firstname(const ::std::string& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  ::std::string* mutable_firstname();
  ::std::string* release_firstname();
  void set_allocated_firstname(::std::string* firstname);

  // optional string LastName = 3;
  void clear_lastname();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& lastname() const;
  void set_lastname(const ::std::string& value);
  void set_lastname(const char* value);
  void set_lastname(const char* value, size_t size);
  ::std::string* mutable_lastname();
  ::std::string* release_lastname();
  void set_allocated_lastname(::std::string* lastname);

  // @@protoc_insertion_point(class_scope:Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr firstname_;
  ::google::protobuf::internal::ArenaStringPtr lastname_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hospital_2eproto_impl();
  friend void  protobuf_AddDesc_hospital_2eproto_impl();
  friend void protobuf_AssignDesc_hospital_2eproto();
  friend void protobuf_ShutdownFile_hospital_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Person> Person_default_instance_;

// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  static const Parameter* internal_default_instance();

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  inline Parameter* New() const { return New(NULL); }

  Parameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Parameter* other);
  void UnsafeMergeFrom(const Parameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional string Unit = 3;
  void clear_unit();
  static const int kUnitFieldNumber = 3;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // @@protoc_insertion_point(class_scope:Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  float value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hospital_2eproto_impl();
  friend void  protobuf_AddDesc_hospital_2eproto_impl();
  friend void protobuf_AssignDesc_hospital_2eproto();
  friend void protobuf_ShutdownFile_hospital_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Parameter> Parameter_default_instance_;

// -------------------------------------------------------------------

class ExaminationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ExaminationResult) */ {
 public:
  ExaminationResult();
  virtual ~ExaminationResult();

  ExaminationResult(const ExaminationResult& from);

  inline ExaminationResult& operator=(const ExaminationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExaminationResult& default_instance();

  static const ExaminationResult* internal_default_instance();

  void Swap(ExaminationResult* other);

  // implements Message ----------------------------------------------

  inline ExaminationResult* New() const { return New(NULL); }

  ExaminationResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExaminationResult& from);
  void MergeFrom(const ExaminationResult& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExaminationResult* other);
  void UnsafeMergeFrom(const ExaminationResult& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Date = 1;
  void clear_date();
  static const int kDateFieldNumber = 1;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional string Commisioner = 2;
  void clear_commisioner();
  static const int kCommisionerFieldNumber = 2;
  const ::std::string& commisioner() const;
  void set_commisioner(const ::std::string& value);
  void set_commisioner(const char* value);
  void set_commisioner(const char* value, size_t size);
  ::std::string* mutable_commisioner();
  ::std::string* release_commisioner();
  void set_allocated_commisioner(::std::string* commisioner);

  // optional .Person Person = 3;
  bool has_person() const;
  void clear_person();
  static const int kPersonFieldNumber = 3;
  const ::Person& person() const;
  ::Person* mutable_person();
  ::Person* release_person();
  void set_allocated_person(::Person* person);

  // repeated .Parameter Parameters = 4;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::Parameter& parameters(int index) const;
  ::Parameter* mutable_parameters(int index);
  ::Parameter* add_parameters();
  ::google::protobuf::RepeatedPtrField< ::Parameter >*
      mutable_parameters();
  const ::google::protobuf::RepeatedPtrField< ::Parameter >&
      parameters() const;

  // @@protoc_insertion_point(class_scope:ExaminationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Parameter > parameters_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr commisioner_;
  ::Person* person_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hospital_2eproto_impl();
  friend void  protobuf_AddDesc_hospital_2eproto_impl();
  friend void protobuf_AssignDesc_hospital_2eproto();
  friend void protobuf_ShutdownFile_hospital_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ExaminationResult> ExaminationResult_default_instance_;

// -------------------------------------------------------------------

class AddExaminationReturnMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddExaminationReturnMsg) */ {
 public:
  AddExaminationReturnMsg();
  virtual ~AddExaminationReturnMsg();

  AddExaminationReturnMsg(const AddExaminationReturnMsg& from);

  inline AddExaminationReturnMsg& operator=(const AddExaminationReturnMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddExaminationReturnMsg& default_instance();

  static const AddExaminationReturnMsg* internal_default_instance();

  void Swap(AddExaminationReturnMsg* other);

  // implements Message ----------------------------------------------

  inline AddExaminationReturnMsg* New() const { return New(NULL); }

  AddExaminationReturnMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddExaminationReturnMsg& from);
  void MergeFrom(const AddExaminationReturnMsg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddExaminationReturnMsg* other);
  void UnsafeMergeFrom(const AddExaminationReturnMsg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Retval = 1;
  void clear_retval();
  static const int kRetvalFieldNumber = 1;
  bool retval() const;
  void set_retval(bool value);

  // @@protoc_insertion_point(class_scope:AddExaminationReturnMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool retval_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hospital_2eproto_impl();
  friend void  protobuf_AddDesc_hospital_2eproto_impl();
  friend void protobuf_AssignDesc_hospital_2eproto();
  friend void protobuf_ShutdownFile_hospital_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddExaminationReturnMsg> AddExaminationReturnMsg_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional int32 Id = 1;
inline void Person::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:Person.Id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Person.Id)
}

// optional string FirstName = 2;
inline void Person::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::firstname() const {
  // @@protoc_insertion_point(field_get:Person.FirstName)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.FirstName)
}
inline void Person::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.FirstName)
}
inline void Person::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.FirstName)
}
inline ::std::string* Person::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:Person.FirstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_firstname() {
  // @@protoc_insertion_point(field_release:Person.FirstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:Person.FirstName)
}

// optional string LastName = 3;
inline void Person::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::lastname() const {
  // @@protoc_insertion_point(field_get:Person.LastName)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.LastName)
}
inline void Person::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.LastName)
}
inline void Person::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.LastName)
}
inline ::std::string* Person::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:Person.LastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_lastname() {
  // @@protoc_insertion_point(field_release:Person.LastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:Person.LastName)
}

inline const Person* Person::internal_default_instance() {
  return &Person_default_instance_.get();
}
// -------------------------------------------------------------------

// Parameter

// optional string Name = 1;
inline void Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:Parameter.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameter.Name)
}
inline void Parameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameter.Name)
}
inline void Parameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameter.Name)
}
inline ::std::string* Parameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Parameter.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_name() {
  // @@protoc_insertion_point(field_release:Parameter.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Parameter.Name)
}

// optional float Value = 2;
inline void Parameter::clear_value() {
  value_ = 0;
}
inline float Parameter::value() const {
  // @@protoc_insertion_point(field_get:Parameter.Value)
  return value_;
}
inline void Parameter::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Parameter.Value)
}

// optional string Unit = 3;
inline void Parameter::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::unit() const {
  // @@protoc_insertion_point(field_get:Parameter.Unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameter.Unit)
}
inline void Parameter::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameter.Unit)
}
inline void Parameter::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameter.Unit)
}
inline ::std::string* Parameter::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:Parameter.Unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_unit() {
  // @@protoc_insertion_point(field_release:Parameter.Unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:Parameter.Unit)
}

inline const Parameter* Parameter::internal_default_instance() {
  return &Parameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ExaminationResult

// optional string Date = 1;
inline void ExaminationResult::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExaminationResult::date() const {
  // @@protoc_insertion_point(field_get:ExaminationResult.Date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExaminationResult::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExaminationResult.Date)
}
inline void ExaminationResult::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExaminationResult.Date)
}
inline void ExaminationResult::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExaminationResult.Date)
}
inline ::std::string* ExaminationResult::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:ExaminationResult.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExaminationResult::release_date() {
  // @@protoc_insertion_point(field_release:ExaminationResult.Date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExaminationResult::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:ExaminationResult.Date)
}

// optional string Commisioner = 2;
inline void ExaminationResult::clear_commisioner() {
  commisioner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExaminationResult::commisioner() const {
  // @@protoc_insertion_point(field_get:ExaminationResult.Commisioner)
  return commisioner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExaminationResult::set_commisioner(const ::std::string& value) {
  
  commisioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExaminationResult.Commisioner)
}
inline void ExaminationResult::set_commisioner(const char* value) {
  
  commisioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExaminationResult.Commisioner)
}
inline void ExaminationResult::set_commisioner(const char* value, size_t size) {
  
  commisioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExaminationResult.Commisioner)
}
inline ::std::string* ExaminationResult::mutable_commisioner() {
  
  // @@protoc_insertion_point(field_mutable:ExaminationResult.Commisioner)
  return commisioner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExaminationResult::release_commisioner() {
  // @@protoc_insertion_point(field_release:ExaminationResult.Commisioner)
  
  return commisioner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExaminationResult::set_allocated_commisioner(::std::string* commisioner) {
  if (commisioner != NULL) {
    
  } else {
    
  }
  commisioner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commisioner);
  // @@protoc_insertion_point(field_set_allocated:ExaminationResult.Commisioner)
}

// optional .Person Person = 3;
inline bool ExaminationResult::has_person() const {
  return this != internal_default_instance() && person_ != NULL;
}
inline void ExaminationResult::clear_person() {
  if (GetArenaNoVirtual() == NULL && person_ != NULL) delete person_;
  person_ = NULL;
}
inline const ::Person& ExaminationResult::person() const {
  // @@protoc_insertion_point(field_get:ExaminationResult.Person)
  return person_ != NULL ? *person_
                         : *::Person::internal_default_instance();
}
inline ::Person* ExaminationResult::mutable_person() {
  
  if (person_ == NULL) {
    person_ = new ::Person;
  }
  // @@protoc_insertion_point(field_mutable:ExaminationResult.Person)
  return person_;
}
inline ::Person* ExaminationResult::release_person() {
  // @@protoc_insertion_point(field_release:ExaminationResult.Person)
  
  ::Person* temp = person_;
  person_ = NULL;
  return temp;
}
inline void ExaminationResult::set_allocated_person(::Person* person) {
  delete person_;
  person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ExaminationResult.Person)
}

// repeated .Parameter Parameters = 4;
inline int ExaminationResult::parameters_size() const {
  return parameters_.size();
}
inline void ExaminationResult::clear_parameters() {
  parameters_.Clear();
}
inline const ::Parameter& ExaminationResult::parameters(int index) const {
  // @@protoc_insertion_point(field_get:ExaminationResult.Parameters)
  return parameters_.Get(index);
}
inline ::Parameter* ExaminationResult::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:ExaminationResult.Parameters)
  return parameters_.Mutable(index);
}
inline ::Parameter* ExaminationResult::add_parameters() {
  // @@protoc_insertion_point(field_add:ExaminationResult.Parameters)
  return parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Parameter >*
ExaminationResult::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:ExaminationResult.Parameters)
  return &parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Parameter >&
ExaminationResult::parameters() const {
  // @@protoc_insertion_point(field_list:ExaminationResult.Parameters)
  return parameters_;
}

inline const ExaminationResult* ExaminationResult::internal_default_instance() {
  return &ExaminationResult_default_instance_.get();
}
// -------------------------------------------------------------------

// AddExaminationReturnMsg

// optional bool Retval = 1;
inline void AddExaminationReturnMsg::clear_retval() {
  retval_ = false;
}
inline bool AddExaminationReturnMsg::retval() const {
  // @@protoc_insertion_point(field_get:AddExaminationReturnMsg.Retval)
  return retval_;
}
inline void AddExaminationReturnMsg::set_retval(bool value) {
  
  retval_ = value;
  // @@protoc_insertion_point(field_set:AddExaminationReturnMsg.Retval)
}

inline const AddExaminationReturnMsg* AddExaminationReturnMsg::internal_default_instance() {
  return &AddExaminationReturnMsg_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hospital_2eproto__INCLUDED
